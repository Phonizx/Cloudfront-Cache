Transform: AWS::Serverless-2016-10-31


Globals:
  Function:
    Architectures: [arm64]
    Runtime: nodejs16.x
    CodeUri: .
    Timeout: 150
    MemorySize: 1024
    Tracing: Active



Resources:
  MyApi:
      Type: 'AWS::Serverless::Api'
      Properties:
        StageName: Prod
        DefinitionBody:
          swagger: '2.0'
          info:
            title: Pricing API
          paths:
            /pricings:
              get:
                x-amazon-apigateway-integration:
                  uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getPricing.Arn}/invocations
                  httpMethod: GET
                  type: aws_proxy
            /pricings:
              post:
                x-amazon-apigateway-integration:
                  uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createPricing.Arn}/invocations
                  httpMethod: POST
                  type: aws_proxy
  
  getPricing:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: true
        Minify: true
        Sourcemap: true
        EntryPoints: [ functions/pricing/getPricingByClaim.ts]
    Properties:
      Handler: getPricingByClaim.handleEvent
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBReadPolicy:
            TableName: !Ref SampleTable
      Tracing: Active
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          NODE_OPTIONS: '--enable-source-maps' # see https://docs.aws.amazon.com/lambda/latest/dg/typescript-exceptions.html
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 # see https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/node-reusing-connections.html
          SAMPLE_TABLE: !Ref SampleTable
          POWERTOOLS_SERVICE_NAME: items-store
          POWERTOOLS_METRICS_NAMESPACE: PowertoolsSAMExample
          POWERTOOLS_LOG_LEVEL: debug
      Events:
        Api:
          Type: Api
          Properties:
            Path: /pricings
            Method: GET

  
  createPricing:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: true
        Minify: true
        Sourcemap: true
        EntryPoints: [ functions/pricing/createPricing.ts]
    Properties:
      Handler: createPricing.handleEvent
      Role: !GetAtt CreatePricingRole.Arn
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBReadPolicy:
            TableName: !Ref SampleTable
      Tracing: Active
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          NODE_OPTIONS: '--enable-source-maps' # see https://docs.aws.amazon.com/lambda/latest/dg/typescript-exceptions.html
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 # see https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/node-reusing-connections.html
          SAMPLE_TABLE: !Ref SampleTable
          POWERTOOLS_SERVICE_NAME: items-store
          POWERTOOLS_METRICS_NAMESPACE: PowertoolsSAMExample
          POWERTOOLS_LOG_LEVEL: debug
      Events:
        Api:
          Type: Api
          Properties:
            Path: /pricings
            Method: POST


  SampleTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: Pricing
      AttributeDefinitions:
        - AttributeName: pricing_id
          AttributeType: S
        - AttributeName: claim_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: pricing_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ClaimIdTimestampIndex
          KeySchema:
            - AttributeName: claim_id
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      ProvisionedThroughput:
        ReadCapacityUnits: 0
        WriteCapacityUnits: 0
      

  CreatePricingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBPutPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt SampleTable.Arn